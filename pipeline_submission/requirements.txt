# =============================
# SRA SUBMISSION 파이프라인 설명 (2024-06 최신)
# =============================

# [주요 기능]
# - ddbj_bioExperiment.xml, ddbj_run.xml, KRA_after_20240311_pp_lib.csv를 입력받아
#   DDBJ/INSDC SRA SUBMISSION용 XML을 자동 생성
# - 각 (Experiment, Run) 쌍별로 submission_id를 매핑하여 별도 SUBMISSION XML 생성
# - 생성된 XML은 XSD(pub/docs/dra/xsd/1-6/SRA.submission.xsd)로 검증, 리포트 저장
# - 모든 출력은 xml_fixed/ddbj_submission_fixed/ 하위에 저장, 리포트는 xml_fixed/submission_report.txt
# - CLI에서 단일 run_id 또는 --all 옵션으로 일괄 생성 지원

# [입력 파일]
# 1. xml_submitted/ddbj_bioExperiment.xml
#    - <EXPERIMENT_SET> 루트, 각 EXPERIMENT의 @accession, STUDY_REF, SAMPLE_DESCRIPTOR 등 사용
# 2. xml_submitted/ddbj_run.xml
#    - <RUN_SET> 루트, 각 RUN의 @accession, EXPERIMENT_REF 등 사용
# 3. xml_submitted/KRA_after_20240311_pp_lib.csv
#    - 헤더: 'KRA submission ID', 'Experiment ID', 'Run ID'
#    - (experiment_id, run_id) → submission_id 매핑, 인코딩은 iso-8859-1

# [출력 파일]
# - xml_fixed/ddbj_submission_fixed/{submission_id}.xml : 각 제출용 SUBMISSION XML
# - xml_fixed/submission_report.txt : XSD 검증 결과 리포트

# [파이프라인 흐름]
# 1. XML/CSV 파싱: xmltodict로 XML→dict, csv.DictReader로 CSV 파싱(iso-8859-1)
# 2. 매핑: CSV에서 (experiment_id, run_id)→submission_id 매핑, 없으면 exp_id_run_id로 대체
# 3. SUBMISSION XML 생성: 필수 태그(IDENTIFIERS, CONTACTS, ACTIONS 등) 포함, 날짜/센터명 자동
# 4. XSD 검증: xmllint(외부 명령)로 pub/docs/dra/xsd/1-6/SRA.submission.xsd 기준 검증
# 5. 리포트: 각 파일별 PASS/FAIL 및 상세 로그를 submission_report.txt에 저장

# [실행 예시]
# - 단일 run_id:   python main.py KAR24062461
# - 전체 일괄:     python main.py --all
# (실행 전 xml_submitted/ 하위에 입력 파일이 존재해야 함)

# [의존성]
# - xmltodict: XML <-> dict 변환
# - lxml: (etree import만, 실제 검증은 xmllint로 수행)
# - xmllint: XSD 검증용 외부 명령(필수, 별도 설치 필요)
# - 표준 라이브러리: os, sys, argparse, csv, datetime, subprocess 등

xmltodict
lxml

# [외부 의존성]
# - xmllint (libxml2-utils 패키지 등으로 설치 필요)
#   예: sudo apt-get install libxml2-utils
