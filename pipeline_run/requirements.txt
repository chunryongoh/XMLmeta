# =============================
# SRA RUN 파이프라인 설명 (2024-06 최신)
# =============================

# [주요 기능]
# - ddbj_run.xml, ddbj_run_file_path.xml, KRA_after_20240311_pp_lib.csv를 입력받아
#   DDBJ/INSDC SRA RUN용 XML을 자동 생성 및 보정
# - XSD(pub/docs/dra/xsd/1-6/SRA.run.xsd) 및 실제 제출 예시(real_examples/kobic-0352.run.xml)와 100% 호환 구조로 변환
# - submission_id별로 <RUN_SET>을 분리하여 xml_fixed/ddbj_run_fixed/ 하위에 저장
# - 전체 보정본(xml_fixed/ddbj_run.fixed.xml) 및 리포트(xml_fixed/run_report.txt) 저장
# - CSV 인코딩(iso-8859-1), 파일 경로/구조 자동 매핑, 필수 태그/속성 자동 보정

# [입력 파일]
# 1. xml_submitted/ddbj_run.xml
#    - <RUN_SET> 루트, 각 RUN의 @accession, EXPERIMENT_REF 등 사용
# 2. xml_submitted/ddbj_run_file_path.xml
#    - 각 RUN별 파일 경로 정보(DATA_BLOCK용)
# 3. xml_submitted/KRA_after_20240311_pp_lib.csv
#    - (experiment_id, run_id) → submission_id 매핑, 인코딩: iso-8859-1

# [출력 파일]
# 1. xml_fixed/ddbj_run.fixed.xml
#    - 전체 보정본(구조/값/속성 자동 보정)
# 2. xml_fixed/ddbj_run_fixed/{submission_id}.run.xml
#    - submission_id별 <RUN_SET> 분리 저장
# 3. xml_fixed/run_report.txt
#    - 각 파일별 XSD 검증 결과 및 리포트

# [파이프라인 흐름]
# - XML/CSV 파싱: xmltodict, csv.DictReader 사용
# - 구조/값/순서/예외처리: fix_structure 함수에서 자동 보정
#   - 빈 값/None/빈 리스트/딕트 제거
#   - SUBMITTER_ID: namespace="KOBIC" 속성 자동 추가
#   - DATA_BLOCK: ddbj_run_file_path.xml에서 파일 정보 자동 생성/추가
#   - 각 RUN의 TITLE 끝에 (KAR...) 자동 추가
#   - IDENTIFIERS: UUID 필수, PRIMARY_ID 제거
#   - 누락/잘못된 값 자동 보정, 불필요한 요소 제거
# - submission_id별로 RUN_SET 분리 저장 및 XSD 검증/리포트
# - xmllint로 XSD(pub/docs/dra/xsd/1-6/SRA.run.xsd) 검증

# [실행 예시]
# python main.py
# (입력 XML/CSV가 xml_submitted/ 하위에 있어야 함)

# [의존성]
xmltodict
lxml

# [외부 의존]
# - xmllint (XSD 검증용, 시스템에 설치 필요)
