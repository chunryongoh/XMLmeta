KBDS → DDBJ 메타데이터 XML 변환 및 검증 자동화 도구

1. 프로젝트 개요
- KBDS에서 관리하는 JSON 기반 메타데이터를 DDBJ의 요구사항에 맞는 XML로 변환
- 변환된 XML을 DDBJ의 XSD 스키마로 검증
- DDBJ 피드백(구조, 필수 요소 등)을 반영하여 자동화된 변환/검증 파이프라인 구축


1) XSD Validation 개념
- XSD(XML Schema Definition)는 XML 문서의 구조, 데이터 타입, 필수/선택 요소 등을 정의하는 표준 스키마 파일임
- XSD validation은 XML이 해당 XSD 규격에 맞게 작성되었는지 자동으로 검증하는 과정
- DDBJ 제출용 XML은 반드시 공식 XSD로 validation을 통과해야 하며, 에러 메시지를 통해 구조적 문제를 사전에 파악할 수 있음
- 대표적인 검증 도구: xmllint --schema <XSD경로> --noout <XML파일>

2) DDBJ 공식 XSD GITHUB 링크 및 설명 요약

- BioProject
  - GITHUB: https://github.com/ddbj/pub/tree/master/docs/bioproject/xsd
  - 주요 파일: Package.xsd
  - 설명: BioProject(프로젝트) 메타데이터의 전체 구조와 필수 요소(프로젝트 ID, 설명, 타입, 제출 정보 등)를 정의
  - 검증 명령: xmllint --schema docs/bioproject/xsd/Package.xsd --noout ddbj_bioproject.xml

- BioSample
  - GITHUB: https://github.com/ddbj/pub/tree/master/docs/biosample/xsd
  - 주요 파일: biosample_set.xsd
  - 설명: BioSample(생물 샘플) 메타데이터의 구조, 샘플 ID, 속성, 소유자, 연락처 등 정의
  - 검증 명령: xmllint --schema docs/biosample/xsd/biosample_set.xsd ddbj_biosample.xml --noout

- DRA (Experiment, Run, Submission 등)
  - GITHUB: https://github.com/ddbj/pub/tree/master/docs/dra/xsd/1-6
  - 주요 파일: SRA.experiment.xsd, SRA.run.xsd, SRA.submission.xsd
  - 설명: 실험, 런, 제출 등 NGS 데이터 제출에 필요한 모든 XML 구조와 제약조건을 정의
  - 검증 명령:
    - xmllint --schema docs/dra/xsd/1-6/SRA.experiment.xsd ddbj_bioExperiment.xml --noout
    - xmllint --schema docs/dra/xsd/1-6/SRA.run.xsd ddbj_run.xml --noout
    - xmllint --schema docs/dra/xsd/1-6/SRA.submission.xsd ddbj_submission.xml --noout

3) XSD 파일 로컬 구축 및 활용 계획

1. GITHUB에서 XSD 전체 다운로드
   git clone https://github.com/ddbj/pub.git
2. 로컬 XSD 경로 구조 예시:
   ./pub/docs/bioproject/xsd/Package.xsd
   ./pub/docs/biosample/xsd/biosample_set.xsd
   ./pub/docs/dra/xsd/1-6/SRA.experiment.xsd
   ./pub/docs/dra/xsd/1-6/SRA.run.xsd
   ./pub/docs/dra/xsd/1-6/SRA.submission.xsd
3. XML → XSD Validation 자동화
   - 변환된 XML을 위 경로의 XSD로 xmllint 등으로 자동 검증
   - 에러 메시지 파싱 및 사용자 피드백 자동화
4. CI/CD 또는 개발환경 연동
   - XML 생성/수정 시마다 validation 자동 실행
   - validation 실패 시 상세 에러 리포트 제공

4) 구축 계획 요약
- GITHUB에서 ddbj/pub 저장소를 git clone하여 최신 XSD 파일을 로컬에 확보
- 각 XML 유형별로 대응하는 XSD 경로를 명확히 지정
- xmllint 등 도구를 활용해 변환된 XML의 XSD validation을 자동화
- validation 결과를 개발/운영 파이프라인에 통합하여, 제출 전 구조적 오류를 사전에 방지


9. 참고 XML 경로 안내
- 본 프로젝트의 변환 및 검증 대상 원본 데이터는 JSON이 아니라, /home/drake/work_local/XMLmeta/xml 디렉토리 내의 XML 파일을 기준으로 삼는다.
- 개발 및 테스트 시 반드시 해당 경로의 XML 파일 구조와 내용을 참고하여 변환/검증 로직을 구현해야 한다.
- (예: /home/drake/work_local/XMLmeta/xml/*.xml)


10. XSD 활용 및 관리 방침
- DDBJ 공식 GITHUB(https://github.com/ddbj/pub/tree/master/docs/...)에서 제공하는 XSD 파일만을 사용한다.
- 새로운 XSD를 직접 작성하거나 커스텀하지 않는다.
- XSD가 변경될 경우, 공식 저장소에서 최신 파일을 받아 동기화한다.
- 변환된 XML의 구조 검증은 반드시 공식 XSD로만 수행한다.
- XSD 관련 Task/서브테스크는 "공식 XSD 활용 및 동기화"에만 집중한다.

# 프로젝트 검증 전략 및 테스크 구조 개선 가이드

본 프로젝트의 핵심 목표는 **이미 구축된 변환 파이프라인의 결과물에 대한 실질적 검증**이다. 이에 따라, 테스크 구조 및 검증 전략은 다음 원칙을 반드시 반영해야 한다.

## 1. 변환(Conversion) 중심 테스크의 리포커싱
- 이미 모든 변환 파이프라인(main.py 등)은 구현되어 있으므로, '변환 모듈 구현' 테스크는 불필요하거나, '변환 결과 검증' 테스크로 통합/변경해야 한다.
- 검증 테스크는 반드시 변환 결과물(output XML)에 대한 품질, 데이터 보존, 정책 적합성, 예시와의 일치성 등을 중심으로 구성한다.

## 2. 검증(Validation/Comparison) 테스크의 세부 분해 및 통합
- 각 파이프라인별 검증 테스크는 다음과 같은 세부 항목으로 분해되어야 한다:
  - XSD 통과 여부(자동)
  - 주요 메타데이터 필드 보존성(자동+수동)
  - 예시 파일과의 차이점 분석(자동+수동)
  - 정보 소스 및 변환 적합성(수동+안내)
  - 최종 수동 체크리스트(수동)
- Submission 등 고복잡도 파이프라인은 cross-reference, 파일 경로, 복수 input 병합 등 특수 검증 포인트를 별도 서브테스크로 분리한다.

## 3. 자동화 vs 수동 검증의 역할 구분
- 각 검증 테스크 내에 '자동화 결과 요약'과 '수동 체크리스트 제공'이 반드시 포함되어야 한다.
- 자동화로 검출 가능한 항목과 사람이 직접 확인해야 할 항목을 명확히 구분하여 문서화한다.

## 4. 불필요한 환경설정/파이프라인 구축 테스크 제거
- '환경설정', 'XSD 레포지토리 클론', '파이프라인 구축' 등 이미 완료된 작업은 테스크에서 제외한다.
- 검증 중심 프로젝트로서, 실제 데이터 검증 및 품질 확보에만 집중한다.

## 5. 테스크 구조 개선 예시
- 기존: 'BioProject XML 변환 모듈 구현', 'BioProject 비교 도구 구현' 등 변환/비교 중심 테스크
- 개선: 'BioProject 변환 결과 검증(XSD, 필드 보존, diff, 소스 적합성, 체크리스트)' 등 검증 중심 테스크로 통합 및 세분화

# BioProject 파이프라인 실사용 검증 PRD

## 목적
BioProject XML 변환 파이프라인의 output이 DDBJ XSD를 통과할 뿐만 아니라, 실제 메타데이터 보존, 변환 적합성, 정보 소스의 정확성까지 모두 충족하는지 검증한다.

## 검증에 사용할 파일
- input: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_bioproject.xml
- output: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_bioproject.fixed.xml
- example: /home/drake/work_local/XMLmeta/real_examples/PRJDB19520.xml

## 검증 단계

### 1. XSD Validation (자동) ---> 완료됨
- output XML이 DDBJ XSD를 통과하는지 확인한다.

### 2. 주요 메타데이터 필드 보존성 검증 (자동+수동)
- input/output XML의 주요 필드(예: ProjectID, Organism, Grant, ProjectType 등) 존재 여부와 값 일치 여부를 자동 비교한다.
- 누락/변형 필드가 있는 경우 자동 탐지하고, 사람이 직접 확인해야 할 필드를 리스트업한다.

### 3. 예시 파일과의 차이점 분석 (자동+수동)
- output과 example XML의 diff를 자동 생성한다.
- 정책적으로 허용되는 차이(날짜 포맷, Submission 위치 등)와 문제되는 차이(필드 누락, 값 손실 등)를 구분한다.
- 사람이 직접 확인해야 할 diff 포인트를 리스트업한다.

### 4. 정보 소스 및 변환 적합성 검증 (수동+안내)
- 각 필드가 input의 어느 부분에서 output으로 옮겨졌는지 매핑 정보를 제공한다.
- 자동화가 어려운 부분은 수동 비교 체크리스트로 안내한다.

### 5. 최종 수동 체크리스트 제공 (수동)
- ProjectID, Grant/Agency, 날짜 포맷, Submission 위치 등 주요 항목을 체크리스트로 제공한다.
- 자동화 결과와 병행하여 검증자가 직접 체크할 수 있도록 한다.

## AI 비서 역할
- 각 단계별로 사람이 확인해야 할 항목을 명확히 리스트업하여 제공
- 자동화로 검출된 문제점이 있으면 구체적으로 제시
- 사람이 직접 확인해야 할 부분은 체크리스트 형태로 제공
- 필요시, input/output/example 파일을 직접 비교하여 오류나 누락을 찾아 제시

## 산출물
- 검증 결과 리포트(자동화 결과 + 수동 체크리스트)
- 주요 diff 및 문제점 요약
- 개선/수정이 필요한 부분에 대한 구체적 안내

# BioSample 파이프라인 실사용 검증 PRD

## 목적
BioSample XML 변환 파이프라인의 output이 DDBJ XSD를 통과할 뿐만 아니라, 실제 메타데이터 보존, 변환 적합성, 정보 소스의 정확성까지 모두 충족하는지 검증한다.

## 검증에 사용할 파일
- input: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_biosample.xml
- output: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_biosample.fixed.xml
- example: /home/drake/work_local/XMLmeta/real_examples/SAMD00844971-2.xml

## 검증 단계

### 1. XSD Validation (자동) ---> 완료됨
- output XML이 DDBJ XSD를 통과하는지 확인한다.

### 2. 주요 메타데이터 필드 보존성 검증 (자동+수동)
- input/output XML의 주요 필드(예: SampleID, Organism, Attribute, Owner, Contact 등) 존재 여부와 값 일치 여부를 자동 비교한다.
- 누락/변형 필드가 있는 경우 자동 탐지하고, 사람이 직접 확인해야 할 필드를 리스트업한다.

### 3. 예시 파일과의 차이점 분석 (자동+수동)
- output과 example XML의 diff를 자동 생성한다.
- 정책적으로 허용되는 차이(날짜 포맷, 구조 위치 등)와 문제되는 차이(필드 누락, 값 손실 등)를 구분한다.
- 사람이 직접 확인해야 할 diff 포인트를 리스트업한다.

### 4. 정보 소스 및 변환 적합성 검증 (수동+안내)
- 각 필드가 input의 어느 부분에서 output으로 옮겨졌는지 매핑 정보를 제공한다.
- 자동화가 어려운 부분은 수동 비교 체크리스트로 안내한다.

### 5. 최종 수동 체크리스트 제공 (수동)
- SampleID, Organism, Attribute, Owner, Contact, 날짜 포맷 등 주요 항목을 체크리스트로 제공한다.
- 자동화 결과와 병행하여 검증자가 직접 체크할 수 있도록 한다.

## AI 비서 역할
- 각 단계별로 사람이 확인해야 할 항목을 명확히 리스트업하여 제공
- 자동화로 검출된 문제점이 있으면 구체적으로 제시
- 사람이 직접 확인해야 할 부분은 체크리스트 형태로 제공
- 필요시, input/output/example 파일을 직접 비교하여 오류나 누락을 찾아 제시

## 산출물
- 검증 결과 리포트(자동화 결과 + 수동 체크리스트)
- 주요 diff 및 문제점 요약
- 개선/수정이 필요한 부분에 대한 구체적 안내

# Experiment 파이프라인 실사용 검증 PRD

## 목적
Experiment XML 변환 파이프라인의 output이 DDBJ XSD를 통과할 뿐만 아니라, 실제 메타데이터 보존, 변환 적합성, 정보 소스의 정확성까지 모두 충족하는지 검증한다.

## 검증에 사용할 파일
- input: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_experiment.xml
- output: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_experiment.fixed.xml
- example: /home/drake/work_local/XMLmeta/real_examples/kobic-0352.experiment.xml

## 검증 단계

### 1. XSD Validation (자동) ---> 완료됨
- output XML이 DDBJ XSD를 통과하는지 확인한다.

### 2. 주요 메타데이터 필드 보존성 검증 (자동+수동)
- input/output XML의 주요 필드(예: ExperimentID, Study, Design, Library, Platform, Instrument 등) 존재 여부와 값 일치 여부를 자동 비교한다.
- 누락/변형 필드가 있는 경우 자동 탐지하고, 사람이 직접 확인해야 할 필드를 리스트업한다.

### 3. 예시 파일과의 차이점 분석 (자동+수동)
- output과 example XML의 diff를 자동 생성한다.
- 정책적으로 허용되는 차이(날짜 포맷, 구조 위치 등)와 문제되는 차이(필드 누락, 값 손실 등)를 구분한다.
- 사람이 직접 확인해야 할 diff 포인트를 리스트업한다.

### 4. 정보 소스 및 변환 적합성 검증 (수동+안내)
- 각 필드가 input의 어느 부분에서 output으로 옮겨졌는지 매핑 정보를 제공한다.
- 자동화가 어려운 부분은 수동 비교 체크리스트로 안내한다.

### 5. 최종 수동 체크리스트 제공 (수동)
- ExperimentID, Study, Design, Library, Platform, Instrument, 날짜 포맷 등 주요 항목을 체크리스트로 제공한다.
- 자동화 결과와 병행하여 검증자가 직접 체크할 수 있도록 한다.

## AI 비서 역할
- 각 단계별로 사람이 확인해야 할 항목을 명확히 리스트업하여 제공
- 자동화로 검출된 문제점이 있으면 구체적으로 제시
- 사람이 직접 확인해야 할 부분은 체크리스트 형태로 제공
- 필요시, input/output/example 파일을 직접 비교하여 오류나 누락을 찾아 제시

## 산출물
- 검증 결과 리포트(자동화 결과 + 수동 체크리스트)
- 주요 diff 및 문제점 요약
- 개선/수정이 필요한 부분에 대한 구체적 안내

# Run 파이프라인 실사용 검증 PRD

## 목적
Run XML 변환 파이프라인의 output이 DDBJ XSD를 통과할 뿐만 아니라, 실제 메타데이터 보존, 변환 적합성, 정보 소스의 정확성까지 모두 충족하는지 검증한다.

## 검증에 사용할 파일
- input: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_run.xml
- output: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_run.fixed.xml
- example: /home/drake/work_local/XMLmeta/real_examples/kobic-0352.run.xml

## 검증 단계

### 1. XSD Validation (자동)---> 완료됨
- output XML이 DDBJ XSD를 통과하는지 확인한다.

### 2. 주요 메타데이터 필드 보존성 검증 (자동+수동)
- input/output XML의 주요 필드(예: RunID, ExperimentRef, DataBlock, File 등) 존재 여부와 값 일치 여부를 자동 비교한다.
- 누락/변형 필드가 있는 경우 자동 탐지하고, 사람이 직접 확인해야 할 필드를 리스트업한다.

### 3. 예시 파일과의 차이점 분석 (자동+수동)
- output과 example XML의 diff를 자동 생성한다.
- 정책적으로 허용되는 차이(날짜 포맷, 구조 위치 등)와 문제되는 차이(필드 누락, 값 손실 등)를 구분한다.
- 사람이 직접 확인해야 할 diff 포인트를 리스트업한다.

### 4. 정보 소스 및 변환 적합성 검증 (수동+안내)
- 각 필드가 input의 어느 부분에서 output으로 옮겨졌는지 매핑 정보를 제공한다.
- 자동화가 어려운 부분은 수동 비교 체크리스트로 안내한다.

### 5. 최종 수동 체크리스트 제공 (수동)
- RunID, ExperimentRef, DataBlock, File, 날짜 포맷 등 주요 항목을 체크리스트로 제공한다.
- 자동화 결과와 병행하여 검증자가 직접 체크할 수 있도록 한다.

## AI 비서 역할
- 각 단계별로 사람이 확인해야 할 항목을 명확히 리스트업하여 제공
- 자동화로 검출된 문제점이 있으면 구체적으로 제시
- 사람이 직접 확인해야 할 부분은 체크리스트 형태로 제공
- 필요시, input/output/example 파일을 직접 비교하여 오류나 누락을 찾아 제시

## 산출물
- 검증 결과 리포트(자동화 결과 + 수동 체크리스트)
- 주요 diff 및 문제점 요약
- 개선/수정이 필요한 부분에 대한 구체적 안내

# Submission 파이프라인 실사용 검증 PRD

## 목적
Submission XML 변환 파이프라인의 output이 DDBJ XSD를 통과할 뿐만 아니라, 실제 메타데이터 보존, 변환 적합성, 정보 소스의 정확성, 그리고 여러 입력 파일 및 다양한 정보 경로를 올바르게 처리하는지까지 모두 검증한다.

## 검증에 사용할 파일
- input:
  - /home/drake/work_local/XMLmeta/xml_submitted/ddbj_bioExperiment.xml
  - /home/drake/work_local/XMLmeta/xml_submitted/ddbj_biosample.xml
  - /home/drake/work_local/XMLmeta/xml_submitted/ddbj_bioproject.xml
  - /home/drake/work_local/XMLmeta/xml_submitted/ddbj_run.xml
  - /home/drake/work_local/XMLmeta/xml_submitted/ddbj_run_file_path.xml
- output: /home/drake/work_local/XMLmeta/xml_submitted/ddbj_submission_*.fixed.xml
- example: /home/drake/work_local/XMLmeta/real_examples/kobic-0352.submission.xml

## 검증 단계

### 1. XSD Validation (자동)---> 완료됨
- output XML이 DDBJ XSD를 통과하는지 확인한다.

### 2. 주요 메타데이터 필드 보존성 검증 (자동+수동)
- 각 input XML에서 필요한 정보(예: BioProject, BioSample, Experiment, Run, File 등)가 output Submission XML에 모두 반영되어 있는지 자동 비교한다.
- 누락/변형 필드가 있는 경우 자동 탐지하고, 사람이 직접 확인해야 할 필드를 리스트업한다.
- Submission 특성상, 여러 input 간의 cross-reference(참조 무결성)도 함께 검증한다.

### 3. 예시 파일과의 차이점 분석 (자동+수동)
- output과 example XML의 diff를 자동 생성한다.
- 정책적으로 허용되는 차이(날짜 포맷, 구조 위치 등)와 문제되는 차이(필드 누락, 값 손실 등)를 구분한다.
- 사람이 직접 확인해야 할 diff 포인트를 리스트업한다.

### 4. 정보 소스 및 변환 적합성 검증 (수동+안내)
- 각 필드가 어떤 input 파일의 어느 부분에서 output으로 옮겨졌는지 매핑 정보를 제공한다.
- 자동화가 어려운 부분(예: 여러 input 간의 참조, 파일 경로 처리 등)은 수동 비교 체크리스트로 안내한다.
- Submission만의 특수 로직(예: 파일 경로, 외부 참조, 복수 input 병합 등)에 대한 검증 항목을 추가한다.

### 5. 최종 수동 체크리스트 제공 (수동)
- BioProject, BioSample, Experiment, Run, File, Submission 관련 주요 항목을 체크리스트로 제공한다.
- 여러 input 간의 참조 무결성, 파일 경로 처리, Submission-specific 필드 등도 포함한다.
- 자동화 결과와 병행하여 검증자가 직접 체크할 수 있도록 한다.

## AI 비서 역할
- 각 단계별로 사람이 확인해야 할 항목을 명확히 리스트업하여 제공
- 자동화로 검출된 문제점이 있으면 구체적으로 제시
- 사람이 직접 확인해야 할 부분은 체크리스트 형태로 제공
- 필요시, input/output/example 파일을 직접 비교하여 오류나 누락을 찾아 제시
- Submission 특유의 복수 input, cross-reference, 파일 경로 등 복잡한 검증 포인트를 명확히 안내

## 산출물
- 검증 결과 리포트(자동화 결과 + 수동 체크리스트)
- 주요 diff 및 문제점 요약
- 개선/수정이 필요한 부분에 대한 구체적 안내
